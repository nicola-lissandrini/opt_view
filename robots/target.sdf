<?xml version="1.0"?>


<sdf version='1.4'>
	<model name="target">
		<link name="target_base_link">
			<visual name="target_base_link_visual">
				<pose>0 0 -0.05 0 0 0</pose>
				<material>
					<script><name>Gazebo/Blue</name></script>
				</material>
				<geometry>
					<sphere>
						<radius>0.1</radius>
					</sphere>
				</geometry>
			</visual>
			<collision name="target_base_link_collision">
				<pose>0 0 -0.05 0 0 0</pose>
				<geometry>
					<sphere>
						<radius>0.1</radius>
					</sphere>
				</geometry>
			</collision>
			<inertial>
				<mass value="0.0001" />
				<inertia ixx="0.00002" ixy="0.0" ixz="0.0" iyy="0.00002" iyz="0.0" izz="0.00002" />
			</inertial>
		</link>

		<plugin filename="librotors_gazebo_odometry_plugin.so" name="target_odometry">
			<linkName>target_base_link</linkName>
			<robotNamespace>/target</robotNamespace>
			<poseTopic>pose</poseTopic>
			<poseWithCovarianceTopic>pose_with_covariance</poseWithCovarianceTopic>
			<positionTopic>position</positionTopic>
			<transformTopic>transform</transformTopic>
			<odometryTopic>odometry</odometryTopic>
			<parentFrameId>world</parentFrameId> <!-- Use the scoped link name here. e.g. Model::link. -->
			<childFrameId>target</childFrameId>
			<measurementDivisor>1</measurementDivisor> <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
			<measurementDelay>0</measurementDelay> <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
			<unknownDelay>0</unknownDelay> <!-- additional delay, that just gets added to the timestamp [s] -->
			<noiseNormalPosition>0 0 0</noiseNormalPosition> <!-- standard deviation of additive white gaussian noise [m] -->
			<noiseNormalQuaternion>0 0 0</noiseNormalQuaternion> <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
			<noiseNormalLinearVelocity>0 0  0</noiseNormalLinearVelocity> <!-- standard deviation of additive white gaussian noise [m/s] -->
			<noiseNormalAngularVelocity>0 0  0</noiseNormalAngularVelocity> <!-- standard deviation of additive white gaussian noise [rad/s] -->
			<noiseUniformPosition>0 0  0</noiseUniformPosition> <!-- symmetric bounds of uniform noise [m] -->
			<noiseUniformQuaternion>0 0  0</noiseUniformQuaternion> <!-- symmetric bounds of uniform noise [rad], computation see above -->
			<noiseUniformLinearVelocity>0 0  0</noiseUniformLinearVelocity> <!-- symmetric bounds of uniform noise [m/s] -->
			<noiseUniformAngularVelocity>0 0  0</noiseUniformAngularVelocity> <!-- symmetric bounds of uniform noise [rad/s] -->
		</plugin>
		<plugin name="target_trajectory" filename="libtarget_trajectory.so">
			<link>target_base_link</link>
			<initial_position x="1" y="0" z="0" />
			<speed>0.0</speed>
			<amplitude>0.5</amplitude>
			<frequency>0.4</frequency>
			<delay>10</delay>
		</plugin>
	</model>
</sdf>
