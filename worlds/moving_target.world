<?xml version="1.0" ?>
<sdf version="1.4">
  <world name="default">
    <include>
      <uri>model://ground_plane</uri>
    </include>
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- Only one ROS interface plugin is required per world, as any other plugin can connect a Gazebo
         topic to a ROS topic (or vise versa). -->
    <plugin name="ros_interface_plugin" filename="librotors_gazebo_ros_interface_plugin.so"/>

    <actor name="target_actor">
      <skin></skin>
      <link name="target_base_link">
        <visual name="target_base_link_visual">
          <origin xyz="0 0 -0.05" />
          <material>
            <script><name>Gazebo/Blue</name></script>
          </material>
          <geometry>
            <sphere>
              <radius>0.1</radius>
            </sphere>
          </geometry>
        </visual>
      </link>

      <script>
        <loop>false</loop>
        <delay_start>3.0</delay_start>
        <auto_start>true</auto_start>
        <trajectory id="0" type="walk">
          <waypoint>
            <time>0.0</time>
            <pose>0 0 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>1.0</time>
            <pose>1 1 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>2.0</time>
            <pose>2 0 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>3.0</time>
            <pose>3 -1 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>4.0</time>
            <pose>4 0 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>5.0</time>
            <pose>5 0 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>6.0</time>
            <pose>6 1 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>7.0</time>
            <pose>7 0 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>8.0</time>
            <pose>8 -1 0 0 0 0</pose>
          </waypoint>
          <waypoint>
            <time>9.0</time>
            <pose>9 0 0 0 0 0</pose>
          </waypoint>
        </trajectory>
      </script>

      <plugin filename="librotors_gazebo_odometry_plugin.so" name="target_odometry">
        <linkName>target_base_link</linkName>
        <robotNamespace>/target</robotNamespace>
        <poseTopic>pose</poseTopic>
        <poseWithCovarianceTopic>pose_with_covariance</poseWithCovarianceTopic>
        <positionTopic>position</positionTopic>
        <transformTopic>transform</transformTopic>
        <odometryTopic>odometry</odometryTopic>
        <parentFrameId>world</parentFrameId> <!-- Use the scoped link name here. e.g. Model::link. -->
        <childFrameId>target</childFrameId>
        <measurementDivisor>1</measurementDivisor> <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
        <measurementDelay>0</measurementDelay> <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
        <unknownDelay>0</unknownDelay> <!-- additional delay, that just gets added to the timestamp [s] -->
        <noiseNormalPosition>0 0 0</noiseNormalPosition> <!-- standard deviation of additive white gaussian noise [m] -->
        <noiseNormalQuaternion>0 0 0</noiseNormalQuaternion> <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
        <noiseNormalLinearVelocity>0 0  0</noiseNormalLinearVelocity> <!-- standard deviation of additive white gaussian noise [m/s] -->
        <noiseNormalAngularVelocity>0 0  0</noiseNormalAngularVelocity> <!-- standard deviation of additive white gaussian noise [rad/s] -->
        <noiseUniformPosition>0 0  0</noiseUniformPosition> <!-- symmetric bounds of uniform noise [m] -->
        <noiseUniformQuaternion>0 0  0</noiseUniformQuaternion> <!-- symmetric bounds of uniform noise [rad], computation see above -->
        <noiseUniformLinearVelocity>0 0  0</noiseUniformLinearVelocity> <!-- symmetric bounds of uniform noise [m/s] -->
        <noiseUniformAngularVelocity>0 0  0</noiseUniformAngularVelocity> <!-- symmetric bounds of uniform noise [rad/s] -->
      </plugin>
    </actor>

    <spherical_coordinates>
      <surface_model>EARTH_WGS84</surface_model>
      <latitude_deg>47.3667</latitude_deg>
      <longitude_deg>8.5500</longitude_deg>
      <elevation>500.0</elevation>
      <heading_deg>0</heading_deg>
    </spherical_coordinates>
    <physics type='ode'>
      <ode>
        <solver>
          <type>quick</type>
          <iters>1000</iters>
          <sor>1.3</sor>
        </solver>
        <constraints>
          <cfm>0</cfm>
          <erp>0.2</erp>
          <contact_max_correcting_vel>100</contact_max_correcting_vel>
          <contact_surface_layer>0.001</contact_surface_layer>
        </constraints>
      </ode>
      <max_step_size>0.01</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>100</real_time_update_rate>
      <gravity>0 0 -9.8</gravity>
    </physics>
  </world>
</sdf>
